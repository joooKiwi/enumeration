/*******************************************************************************
 Copyright (c) 2023-2024. Jonathan Bédard ~ JóôòKiwi

 This project is free to use.
 All the right is reserved to the author of this project.
 ******************************************************************************/

import type {Enumerable}                                                                                                                                                                                                                                                                                                                                                   from "../Enumerable"
import type {EnumerableConstructor}                                                                                                                                                                                                                                                                                                                                        from "../EnumerableConstructor"
import type {EnumerableNameByEnumerableConstructorAndEnumerableOrdinalAndOrdinal, EnumerableOrdinalByEnumerableConstructorAndEnumerableNameAndName, NameOf, OrdinalOf, SpecificNameOf, SpecificOrdinalOf, ValueByEnumerableConstructorAndEnumerableNameAndName, ValueByEnumerableConstructorAndEnumerableName, ValueByEnumerableConstructorAndEnumerableOrdinalAndOrdinal} from "../Enumerable.types"
import type {EnumerableWithNullableGrandParent}                                                                                                                                                                                                                                                                                                                            from "../EnumerableWithNullableGrandParent"
import type {EnumerableWithNullableGreatGrandParent}                                                                                                                                                                                                                                                                                                                       from "../EnumerableWithNullableGreatGrandParent"
import type {EnumerableWithNullableParent}                                                                                                                                                                                                                                                                                                                                 from "../EnumerableWithNullableParent"
import type {Nullable, PossibleBigIntOrTemplate, PossibleNumberOrTemplate, PossibleNumericOrTemplate, PossibleString, PossibleStringOrNumeric}                                                                                                                                                                                                                             from "../general type"
import type {CompanionEnumDeclaration}                                                                                                                                                                                                                                                                                                                                     from "./CompanionEnum.declaration"
import type {CompanionEnumWithParentDeclaration}                                                                                                                                                                                                                                                                                                                           from "./CompanionEnumWithParent.declaration"
import type {CompanionEnumWithGrandParentDeclaration}                                                                                                                                                                                                                                                                                                                      from "./CompanionEnumWithGrandParent.declaration"
import type {ImpossibleNames}                                                                                                                                                                                                                                                                                                                                              from "./types"

export interface CompanionEnumWithGreatGrandParentDeclaration<out ENUM extends EnumerableWithNullableGreatGrandParent<PARENT_ENUM, GRAND_PARENT_ENUM, GREAT_GRAND_PARENT_ENUM>,
    ENUM_CONSTRUCTOR extends EnumerableConstructor<ENUM, CompanionEnumWithGreatGrandParentDeclaration<ENUM, ENUM_CONSTRUCTOR, PARENT_ENUM, PARENT_ENUM_CONSTRUCTOR, GRAND_PARENT_ENUM, GRAND_PARENT_ENUM_CONSTRUCTOR, GREAT_GRAND_PARENT_ENUM, GREAT_GRAND_PARENT_ENUM_CONSTRUCTOR>>,
    out PARENT_ENUM extends EnumerableWithNullableGrandParent<GRAND_PARENT_ENUM, GREAT_GRAND_PARENT_ENUM>,
    PARENT_ENUM_CONSTRUCTOR extends EnumerableConstructor<PARENT_ENUM, CompanionEnumWithGrandParentDeclaration<PARENT_ENUM, PARENT_ENUM_CONSTRUCTOR, GRAND_PARENT_ENUM, GRAND_PARENT_ENUM_CONSTRUCTOR, GREAT_GRAND_PARENT_ENUM, GREAT_GRAND_PARENT_ENUM_CONSTRUCTOR>>,
    out GRAND_PARENT_ENUM extends EnumerableWithNullableParent<GREAT_GRAND_PARENT_ENUM>,
    GRAND_PARENT_ENUM_CONSTRUCTOR extends EnumerableConstructor<GRAND_PARENT_ENUM, CompanionEnumWithParentDeclaration<GRAND_PARENT_ENUM, GRAND_PARENT_ENUM_CONSTRUCTOR, GREAT_GRAND_PARENT_ENUM, GREAT_GRAND_PARENT_ENUM_CONSTRUCTOR>>,
    out GREAT_GRAND_PARENT_ENUM extends Enumerable,
    GREAT_GRAND_PARENT_ENUM_CONSTRUCTOR extends EnumerableConstructor<GREAT_GRAND_PARENT_ENUM, CompanionEnumDeclaration<GREAT_GRAND_PARENT_ENUM, GREAT_GRAND_PARENT_ENUM_CONSTRUCTOR>>, >
    extends CompanionEnumWithGrandParentDeclaration<ENUM, ENUM_CONSTRUCTOR, PARENT_ENUM, PARENT_ENUM_CONSTRUCTOR, GRAND_PARENT_ENUM, GRAND_PARENT_ENUM_CONSTRUCTOR> {

    /** The {@link EnumerableWithNullableGreatGrandParent} constructor (or type / class in other languages) */
    get greatGrandParentInstance(): GREAT_GRAND_PARENT_ENUM_CONSTRUCTOR


    //#region -------------------- Default getter & setter methods --------------------

    get defaultValue(): ENUM

    set defaultValue(value: Nullable<| PossibleStringOrNumeric | ENUM | PARENT_ENUM | GRAND_PARENT_ENUM | GREAT_GRAND_PARENT_ENUM>,)

    setDefaultValue(value: ImpossibleNames,): never
    setDefaultValue(greatGrandParentInstance: GREAT_GRAND_PARENT_ENUM,): this
    setDefaultValue(value: Nullable<| PossibleStringOrNumeric | ENUM | PARENT_ENUM | GRAND_PARENT_ENUM | GREAT_GRAND_PARENT_ENUM>,): this

    //#endregion -------------------- Default getter & setter methods --------------------

    //#region -------------------- "Get value" methods --------------------

    getValue                                                                                                                                                                                                                                                             (value: Nullable<ImpossibleNames>,):                                                                                                                                never
    getValue<const ORDINAL extends number, >                                                                                                                                                                                                                             (ordinal: Nullable<ORDINAL>,):                                                                                                                                      ValueByEnumerableConstructorAndEnumerableOrdinalAndOrdinal<ENUM_CONSTRUCTOR, ENUM, ORDINAL>
    getValue<const ORDINAL extends number, >                                                                                                                                                                                                                             (ordinal: Nullable<PossibleNumberOrTemplate<ORDINAL>>,):                                                                                                            ValueByEnumerableConstructorAndEnumerableOrdinalAndOrdinal<ENUM_CONSTRUCTOR, ENUM, ORDINAL>
    getValue                                                                                                                                                                                                                                                             (ordinal: Nullable<PossibleNumberOrTemplate>,):                                                                                                                     ENUM
    getValue                                                                                                                                                                                                                                                             (ordinal: Nullable<PossibleBigIntOrTemplate>,):                                                                                                                     ENUM
    getValue<const NAME extends string, >                                                                                                                                                                                                                                (name: Nullable<PossibleString<NAME>>,):                                                                                                                            ValueByEnumerableConstructorAndEnumerableNameAndName<ENUM_CONSTRUCTOR, ENUM, NAME>
    getValue                                                                                                                                                                                                                                                             (nameOrOrdinal: Nullable<PossibleString>,):                                                                                                                         ENUM
    getValue<const INSTANCE extends ENUM, >                                                                                                                                                                                                                              (instance: Nullable<INSTANCE>,):                                                                                                                                    INSTANCE
    getValue<const PARENT_INSTANCE extends PARENT_ENUM, >                                                                                                                                                                                                                (parentInstance: Nullable<PARENT_INSTANCE>,):                                                                                                                       ValueByEnumerableConstructorAndEnumerableName<ENUM_CONSTRUCTOR, PARENT_INSTANCE>
    getValue<const GRAND_PARENT_INSTANCE extends GRAND_PARENT_ENUM, >                                                                                                                                                                                                    (grandParentInstance: Nullable<GRAND_PARENT_INSTANCE>,):                                                                                                            ValueByEnumerableConstructorAndEnumerableName<ENUM_CONSTRUCTOR, GRAND_PARENT_INSTANCE>
    /**
     * Get the {@link EnumerableWithNullableGreatGrandParent instance} by comparing its {@link EnumerableWithNullableGreatGrandParent.greatGrandParent} value
     *
     * @param greatGrandParentInstance The great-grandparent instance to find
     * @throws {InvalidEnumerableException}
     */
    getValue<const GREAT_GRAND_PARENT_INSTANCE extends GREAT_GRAND_PARENT_ENUM, >                                                                                                                                                                                        (greatGrandParentInstance: Nullable<GREAT_GRAND_PARENT_INSTANCE>,):                                                                                                 ValueByEnumerableConstructorAndEnumerableName<ENUM_CONSTRUCTOR, GREAT_GRAND_PARENT_INSTANCE>
    getValue<const ORDINAL extends number, const NAME extends string, const INSTANCE extends ENUM, const PARENT_INSTANCE extends PARENT_ENUM, const GRAND_PARENT_INSTANCE extends GRAND_PARENT_ENUM, const GREAT_GRAND_PARENT_INSTANCE extends GREAT_GRAND_PARENT_ENUM, >(value: Nullable<| PossibleNumericOrTemplate<ORDINAL> | PossibleString<NAME> | INSTANCE | PARENT_INSTANCE | GRAND_PARENT_INSTANCE | GREAT_GRAND_PARENT_INSTANCE>,): | ValueByEnumerableConstructorAndEnumerableOrdinalAndOrdinal<ENUM_CONSTRUCTOR, ENUM, ORDINAL> | ValueByEnumerableConstructorAndEnumerableNameAndName<ENUM_CONSTRUCTOR, ENUM, NAME> | INSTANCE | ValueByEnumerableConstructorAndEnumerableName<ENUM_CONSTRUCTOR, | PARENT_INSTANCE | GRAND_PARENT_INSTANCE | GREAT_GRAND_PARENT_INSTANCE> | ENUM

    //#endregion -------------------- "Get value" methods --------------------
    //#region -------------------- "Get name" methods --------------------

    getName                                                                                                                                                                                                                                                             (value: Nullable<ImpossibleNames>,):                                                                                                                                never
    getName<const ORDINAL extends number, >                                                                                                                                                                                                                             (ordinal: Nullable<ORDINAL>,):                                                                                                                                      EnumerableNameByEnumerableConstructorAndEnumerableOrdinalAndOrdinal<ENUM_CONSTRUCTOR, ENUM, ORDINAL>
    getName<const ORDINAL extends number, >                                                                                                                                                                                                                             (ordinal: Nullable<PossibleNumberOrTemplate<ORDINAL>>,):                                                                                                            EnumerableNameByEnumerableConstructorAndEnumerableOrdinalAndOrdinal<ENUM_CONSTRUCTOR, ENUM, ORDINAL>
    getName                                                                                                                                                                                                                                                             (ordinal: Nullable<PossibleNumberOrTemplate>,):                                                                                                                     NameOf<ENUM>
    getName                                                                                                                                                                                                                                                             (ordinal: Nullable<PossibleBigIntOrTemplate>,):                                                                                                                     NameOf<ENUM>
    getName<const NAME extends string, >                                                                                                                                                                                                                                (name: Nullable<PossibleString<NAME>>,):                                                                                                                            SpecificNameOf<NAME, ENUM>
    getName                                                                                                                                                                                                                                                             (nameOrOrdinal: Nullable<PossibleString>,):                                                                                                                         NameOf<ENUM>
    getName<const INSTANCE extends ENUM, >                                                                                                                                                                                                                              (instance: Nullable<INSTANCE>,):                                                                                                                                    NameOf<INSTANCE>
    getName<const PARENT_INSTANCE extends PARENT_ENUM, >                                                                                                                                                                                                                (parentInstance: Nullable<PARENT_INSTANCE>,):                                                                                                                       NameOf<PARENT_INSTANCE>
    getName<const GRAND_PARENT_INSTANCE extends GRAND_PARENT_ENUM, >                                                                                                                                                                                                    (grandParentInstance: Nullable<GRAND_PARENT_INSTANCE>,):                                                                                                            NameOf<GRAND_PARENT_INSTANCE>
    /**
     * Get the {@link EnumerableWithNullableGreatGrandParent.name name} from the {@link EnumerableWithNullableGreatGrandParent great-grandparent instance} directly
     *
     * @param greatGrandParentInstance The great-grandparent instance to find
     * @throws {InvalidEnumerableException}
     */
    getName<const GREAT_GRAND_PARENT_INSTANCE extends GREAT_GRAND_PARENT_ENUM, >                                                                                                                                                                                        (greatGrandParentInstance: Nullable<GREAT_GRAND_PARENT_INSTANCE>,):                                                                                                 NameOf<GREAT_GRAND_PARENT_INSTANCE>
    getName<const ORDINAL extends number, const NAME extends string, const INSTANCE extends ENUM, const PARENT_INSTANCE extends PARENT_ENUM, const GRAND_PARENT_INSTANCE extends GRAND_PARENT_ENUM, const GREAT_GRAND_PARENT_INSTANCE extends GREAT_GRAND_PARENT_ENUM, >(value: Nullable<| PossibleNumericOrTemplate<ORDINAL> | PossibleString<NAME> | INSTANCE | PARENT_INSTANCE | GRAND_PARENT_INSTANCE | GREAT_GRAND_PARENT_INSTANCE>,): | EnumerableNameByEnumerableConstructorAndEnumerableOrdinalAndOrdinal<ENUM_CONSTRUCTOR, ENUM, ORDINAL> | SpecificNameOf<NAME, ENUM> | NameOf<INSTANCE | PARENT_INSTANCE | GRAND_PARENT_INSTANCE | GREAT_GRAND_PARENT_INSTANCE | ENUM>

    //#endregion -------------------- "Get name" methods --------------------
    //#region -------------------- "Get ordinal" methods --------------------

    getOrdinal                                                                                                                                                                                                                                                             (value: Nullable<ImpossibleNames>,):                                                                                                                                never
    getOrdinal<const ORDINAL extends number, >                                                                                                                                                                                                                             (ordinal: Nullable<ORDINAL>,):                                                                                                                                      SpecificOrdinalOf<ORDINAL, ENUM>
    getOrdinal<const ORDINAL extends number, >                                                                                                                                                                                                                             (ordinal: Nullable<PossibleNumberOrTemplate<ORDINAL>>,):                                                                                                            SpecificOrdinalOf<ORDINAL, ENUM>
    getOrdinal                                                                                                                                                                                                                                                             (ordinal: Nullable<PossibleNumberOrTemplate>,):                                                                                                                     OrdinalOf<ENUM>
    getOrdinal                                                                                                                                                                                                                                                             (ordinal: Nullable<PossibleBigIntOrTemplate>,):                                                                                                                     OrdinalOf<ENUM>
    getOrdinal<const NAME extends string, >                                                                                                                                                                                                                                (name: Nullable<PossibleString<NAME>>,):                                                                                                                            EnumerableOrdinalByEnumerableConstructorAndEnumerableNameAndName<ENUM_CONSTRUCTOR, ENUM, NAME>
    getOrdinal                                                                                                                                                                                                                                                             (nameOrOrdinal: Nullable<PossibleString>,):                                                                                                                         OrdinalOf<ENUM>
    getOrdinal<const INSTANCE extends ENUM, >                                                                                                                                                                                                                              (instance: Nullable<INSTANCE>,):                                                                                                                                    OrdinalOf<INSTANCE>
    getOrdinal<const PARENT_INSTANCE extends PARENT_ENUM, >                                                                                                                                                                                                                (parentInstance: Nullable<PARENT_INSTANCE>,):                                                                                                                       OrdinalOf<PARENT_INSTANCE>
    getOrdinal<const GRAND_PARENT_INSTANCE extends GRAND_PARENT_ENUM, >                                                                                                                                                                                                    (grandParentInstance: Nullable<GRAND_PARENT_INSTANCE>,):                                                                                                            OrdinalOf<GRAND_PARENT_INSTANCE>
    /**
     * Get the {@link EnumerableWithNullableGreatGrandParent.ordinal ordinal} from the {@link EnumerableWithNullableGreatGrandParent great-grandparent instance} directly
     *
     * @param greatGrandParentInstance The great-grandparent instance to find
     * @throws {InvalidEnumerableException}
     */
    getOrdinal<const GREAT_GRAND_PARENT_INSTANCE extends GREAT_GRAND_PARENT_ENUM, >                                                                                                                                                                                        (greatGrandParentInstance: Nullable<GREAT_GRAND_PARENT_INSTANCE>,):                                                                                                 OrdinalOf<GREAT_GRAND_PARENT_INSTANCE>
    getOrdinal<const ORDINAL extends number, const NAME extends string, const INSTANCE extends ENUM, const PARENT_INSTANCE extends PARENT_ENUM, const GRAND_PARENT_INSTANCE extends GRAND_PARENT_ENUM, const GREAT_GRAND_PARENT_INSTANCE extends GREAT_GRAND_PARENT_ENUM, >(value: Nullable<| PossibleNumericOrTemplate<ORDINAL> | PossibleString<NAME> | INSTANCE | PARENT_INSTANCE | GRAND_PARENT_INSTANCE | GREAT_GRAND_PARENT_INSTANCE>,): | SpecificOrdinalOf<ORDINAL, ENUM> | EnumerableOrdinalByEnumerableConstructorAndEnumerableNameAndName<ENUM_CONSTRUCTOR, ENUM, NAME> | OrdinalOf<INSTANCE | PARENT_INSTANCE | GRAND_PARENT_INSTANCE | GREAT_GRAND_PARENT_INSTANCE | ENUM>

    //#endregion -------------------- "Get ordinal" methods --------------------

}
